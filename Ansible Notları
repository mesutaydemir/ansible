=============================================================

=============================================================
vagrant status
vagrant box list
vagrant up
vagrant destroy -f


vagrant --help
vagrant ssh ==> Varsayılan olarak kontrol makinesine bağlanır.
vagrant box --help

vagrant init ubuntu/focal64 --box-version 20230119.0.0 ==> vagrant makinesini up etmeden önce oluşturulan vagrant dosyası

=============================================================
Ansible kurulumu
=============================================================

# Öncelikle yazılım reposunu güncelleyip python3 virtual environment paketini [python3-venv] kurmuyoruz; çünkü provisioning dosyasında var:
sudo apt update
sudo apt install python3-venv -y

Ev dizinimizin altında merkezi bir dosya altında yapılandırma dosyalarını oluşturuyoruz:
python3 -m venv ~/.venv/kamp

## Bu komutu etkinleştirmek için:
source ~/.venv/kamp/bin/activate

## Bu komutu etkisizleştirmek için: 
deactivate

which python3 komutu ile /usr/bin/python3 görecektir. source ~/.venv/kamp/bin/activate komutundan sonra venv altındaki python3 


# Dependancy management (pythonda kullanılacak kütüphaneleri indiriyoruz)
## requirements.txt dosyasını /home/vagrant altında oluşturuyoruz:
nano requirements.txt

	ansible==6.7.0
	ansible-core==2.13.7
	cffi==1.15.1
	cryptography==39.0.0
	Jinja2==3.1.2
	MarkupSafe==2.1.2
	packaging==23.0
	pkg_resources==0.0.0
	pycparser==2.21
	PyYAML==6.0
	resolvelib==0.8.1

## aşağıdaki komutlar ile önce pip'i upgrade ediyoruz. Sonra requirements.txt içinde belirtilen python kütüphanelerini (versiyonlarında belirtildiği şekilde) güncelliyoruz. 

Not: Kütüphanelerin versiyonları güvenlik güncellemeleri ve buglardan dolayı ara sıra güncellenerek kontrol edilmeli.

pip3 install --upgrade pip
pip3 install -r requirements.txt (declarative)	==> pip3 install ansible yazarak da kurabilirdim (imperative)


# hosts dosyasını oluşturuyoruz. Yöneteceğimiz makineler bunlar demek:
nano hosts

host0 ansible_host=192.168.56.20
host1 ansible_host=192.168.56.21
host2 ansible_host=192.168.56.22

[all:vars]
ansible_user=vagrant
ansible_password=vagrant

## ad-hoc komutları ile önce bağlantıyı kontrol edeceğiz:

Kontrol makinesinde yönetilen makinelere bağlantı yapılabildiğini doğrulayalım:

ansible all -i hosts -m ping --ssh-common-args='-o StrictHostKeyChecking=no'

Alternatif olarak bu klasörde ansible.cfg dosyasını oluşturup aşağıdaki satırları ekledikten sonra:

[defaults]
host_key_checking = False
inventory=hosts

ansible all -i hosts -m ping 

komutunu çalıştırabiliriz.

## Bazı tek seferlik işlemler için playbook yazıp bunu çalıştırmak anlamsız olabilir. örneğin makinelerin kullandıkları ram miktarını öğrenebiliriz:

ansible all -a "free -m"

ya da disk boyutu

ansible all -a "df -h /"

## host00 ve host01'in kullandığı ram miktarını kontrol etmek için
ansible 'all:host0,host1' -a "df -h /"

## makine ne kadar ayakta
ansible host0 -a "uptime"

## -m parametresi ile modül çağırıp ad-hoc komutlarda bunları kullanabiliriz:
ansible host0 -m shell -a "systemctl status sshd | grep running"
ansible all -m shell -a "systemctl status sshd | grep running"
